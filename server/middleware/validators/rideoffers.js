import { check } from 'express-validator/check';
import notEmpty from '../../helper/notEmpty';

export default {
  create: [
    check('driver')
      .trim()
      .customSanitizer(value => value.replace(/  +/g, ' ').trim())
      .exists()
      .withMessage('Driver name must must be specified')
      .custom(value => notEmpty(value, 'Driver name field cannot be left blank'))
      .isLength({ min: 1, max: 50 })
      .withMessage("Driver's name must be between 1 and 50 characters")
      .matches(/^[a-z (),.'-]+$/i)
      .withMessage('Driver name can only contain letters and the characters (,.\'-)'),
    check('vehicleBrand')
      .trim()
      .customSanitizer(value => value.replace(/  +/g, ' ').trim())
      .exists()
      .withMessage('Vehicle brand must must be specified')
      .custom(value => notEmpty(value, 'Vehicle brand field cannot be left blank'))
      .isLength({ min: 1, max: 50 })
      .withMessage("Vehicle brand must be between 1 and 50 characters")
      .matches(/^[a-z (),.'-]+$/i)
      .withMessage('Vehicle brand can only contain letters and the characters (,.\'-)'),
    check('vehicleModel')
      .trim()
      .customSanitizer(value => value.replace(/  +/g, ' ').trim())
      .exists()
      .withMessage('Vehicle model must must be specified')
      .custom(value => notEmpty(value, 'Vehicle model field cannot be left blank'))
      .isLength({ min: 1, max: 50 })
      .withMessage("Vehicle model must be between 1 and 50 characters")
      .matches(/^[a-z (),.'-]+$/i)
      .withMessage('Vehicle model can only contain letters and the characters (,.\'-)'),
    check('vehicleColor')
      .trim()
      .customSanitizer(value => value.replace(/  +/g, ' ').trim())
      .exists()
      .withMessage('Vehicle color must must be specified')
      .custom(value => notEmpty(value, 'Vehicle color field cannot be left blank'))
      .isLength({ min: 1, max: 50 })
      .withMessage("Vehicle color must be between 1 and 50 characters")
      .matches(/^[a-z (),.'-]+$/i)
      .withMessage('Vehicle color can only contain letters and the characters (,.\'-)'),
    check('currentLocation')
      .trim()
      .customSanitizer(value => value.replace(/  +/g, ' ').trim())
      .exists()
      .withMessage('Current location must must be specified')
      .custom(value => notEmpty(value, 'Current location field cannot be left blank'))
      .isLength({ min: 1, max: 50 })
      .withMessage("Current location must be between 1 and 50 characters")
      .matches(/^[a-z (),.'-]+$/i)
      .withMessage('Current location can only contain letters and the characters (,.\'-)'),
    check('finalDestination')
      .trim()
      .customSanitizer(value => value.replace(/  +/g, ' ').trim())
      .exists()
      .withMessage('Final destination must must be specified')
      .custom(value => notEmpty(value, 'Final destination field cannot be left blank'))
      .isLength({ min: 1, max: 50 })
      .withMessage("Final destination must be between 1 and 50 characters")
      .matches(/^[a-z (),.'-]+$/i)
      .withMessage('Final destination can only contain letters and the characters (,.\'-)'),
    check('route')
      .trim()
      .customSanitizer(value => value.replace(/  +/g, ' ').trim())
      .exists()
      .withMessage('Route must must be specified')
      .custom(value => notEmpty(value, 'Route field cannot be left blank'))
      .isLength({ min: 1, max: 50 })
      .withMessage("Route must be between 1 and 50 characters")
      .matches(/^[a-z (),.'-]+$/i)
      .withMessage('Route can only contain letters and the characters (,.\'-)'),  
    check('vehicleYear')
      .trim()
      .exists().withMessage('Year of vehicle must be specified')
      .custom(value => notEmpty(value, 'Year field cannot be left blank'))
      .isLength({ min: 1, max: 4 })
      .withMessage("Vehicle year must be between 1 and 4 characters")
      .isInt()
      .withMessage('Year must be a number')
      .custom(value => parseInt(value).toFixed(4) > 1999)
      .withMessage('Year must be after 1999'),
    check('availableSeats')
      .trim()
      .exists().withMessage('Available seats must be specified')
      .custom(value => notEmpty(value, 'Seats field cannot be left blank'))
      .isInt()
      .withMessage('Seats must be a number')
      .custom(value => parseInt(value, 10) > 0)
      .withMessage('Seats must be greater than 0'),   
    check('timeOfDeparture')
      .trim()
      .exists().withMessage('Departure time must be specified')
      .custom(value => notEmpty(value, 'Departure time field cannot be left blank'))
      .isDecimal()
      .withMessage('Departure time must be a number or decimal')
      .custom(value => parseFloat(value).toFixed(2) > 0)
      .withMessage('Departure time must be greater than 0'),
    check('price')
      .trim()
      .exists().withMessage('Price must be specified')
      .custom(value => notEmpty(value, 'Price field cannot be left blank'))
      .isDecimal()
      .withMessage('Price must be a number or decimal')
      .custom(value => parseFloat(value).toFixed(2) > 0)
      .withMessage('Price must be greater than 0'),
    check('img')
      .trim()
      .optional({ checkFalsy: true })
      .isURL()
      .withMessage('imageURL must be a url'),
  ],
  update: [
    check('id')
      .isUUID(4)
      .withMessage('Invalid ID'),
      check('driver')
      .trim()
      .customSanitizer(value => value.replace(/  +/g, ' ').trim())
      .exists()
      .withMessage('Driver name must must be specified')
      .custom(value => notEmpty(value, 'Driver name field cannot be left blank'))
      .isLength({ min: 1, max: 50 })
      .withMessage("Driver's name must be between 1 and 50 characters")
      .matches(/^[a-z (),.'-]+$/i)
      .withMessage('Driver name can only contain letters and the characters (,.\'-)'),
    check('vehicleBrand')
      .trim()
      .customSanitizer(value => value.replace(/  +/g, ' ').trim())
      .exists()
      .withMessage('Vehicle brand must must be specified')
      .custom(value => notEmpty(value, 'Vehicle brand field cannot be left blank'))
      .isLength({ min: 1, max: 50 })
      .withMessage("Vehicle brand must be between 1 and 50 characters")
      .matches(/^[a-z (),.'-]+$/i)
      .withMessage('Vehicle brand can only contain letters and the characters (,.\'-)'),
    check('vehicleModel')
      .trim()
      .customSanitizer(value => value.replace(/  +/g, ' ').trim())
      .exists()
      .withMessage('Vehicle model must must be specified')
      .custom(value => notEmpty(value, 'Vehicle model field cannot be left blank'))
      .isLength({ min: 1, max: 50 })
      .withMessage("Vehicle model must be between 1 and 50 characters")
      .matches(/^[a-z (),.'-]+$/i)
      .withMessage('Vehicle model can only contain letters and the characters (,.\'-)'),
    check('vehicleColor')
      .trim()
      .customSanitizer(value => value.replace(/  +/g, ' ').trim())
      .exists()
      .withMessage('Vehicle color must must be specified')
      .custom(value => notEmpty(value, 'Vehicle color field cannot be left blank'))
      .isLength({ min: 1, max: 50 })
      .withMessage("Vehicle color must be between 1 and 50 characters")
      .matches(/^[a-z (),.'-]+$/i)
      .withMessage('Vehicle color can only contain letters and the characters (,.\'-)'),
    check('currentLocation')
      .trim()
      .customSanitizer(value => value.replace(/  +/g, ' ').trim())
      .exists()
      .withMessage('Current location must must be specified')
      .custom(value => notEmpty(value, 'Current location field cannot be left blank'))
      .isLength({ min: 1, max: 50 })
      .withMessage("Current location must be between 1 and 50 characters")
      .matches(/^[a-z (),.'-]+$/i)
      .withMessage('Current location can only contain letters and the characters (,.\'-)'),
    check('finalDestination')
      .trim()
      .customSanitizer(value => value.replace(/  +/g, ' ').trim())
      .exists()
      .withMessage('Final destination must must be specified')
      .custom(value => notEmpty(value, 'Final destination field cannot be left blank'))
      .isLength({ min: 1, max: 50 })
      .withMessage("Final destination must be between 1 and 50 characters")
      .matches(/^[a-z (),.'-]+$/i)
      .withMessage('Final destination can only contain letters and the characters (,.\'-)'),
    check('route')
      .trim()
      .customSanitizer(value => value.replace(/  +/g, ' ').trim())
      .exists()
      .withMessage('Route must must be specified')
      .custom(value => notEmpty(value, 'Route field cannot be left blank'))
      .isLength({ min: 1, max: 50 })
      .withMessage("Route must be between 1 and 50 characters")
      .matches(/^[a-z (),.'-]+$/i)
      .withMessage('Route can only contain letters and the characters (,.\'-)'),  
    check('vehicleYear')
      .trim()
      .exists().withMessage('Year of vehicle must be specified')
      .custom(value => notEmpty(value, 'Year field cannot be left blank'))
      .isLength({ min: 1, max: 4 })
      .withMessage("Vehicle year must be between 1 and 4 characters")
      .isInt()
      .withMessage('Year must be a number')
      .custom(value => parseInt(value).toFixed(4) > 1999)
      .withMessage('Year must be after 1999'),
    check('availableSeats')
      .trim()
      .exists().withMessage('Available seats must be specified')
      .custom(value => notEmpty(value, 'Seats field cannot be left blank'))
      .isInt()
      .withMessage('Seats must be a number')
      .custom(value => parseInt(value, 10) > 0)
      .withMessage('Seats must be greater than 0'),   
    check('timeOfDeparture')
      .trim()
      .exists().withMessage('Departure time must be specified')
      .custom(value => notEmpty(value, 'Departure time field cannot be left blank'))
      .isDecimal()
      .withMessage('Departure time must be a number or decimal')
      .custom(value => parseFloat(value).toFixed(2) > 0)
      .withMessage('Departure time must be greater than 0'),
    check('price')
      .trim()
      .exists().withMessage('Price must be specified')
      .custom(value => notEmpty(value, 'Price field cannot be left blank'))
      .isDecimal()
      .withMessage('Price must be a number or decimal')
      .custom(value => parseFloat(value).toFixed(2) > 0)
      .withMessage('Price must be greater than 0'),
    check('img')
      .trim()
      .optional({ checkFalsy: true })
      .isURL()
      .withMessage('imageURL must be a url'),
  ],
  
};

